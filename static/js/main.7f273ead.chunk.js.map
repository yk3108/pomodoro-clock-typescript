{"version":3,"sources":["sound/beep.mp3","components/Controls.tsx","components/Timer.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Controls","props","type","time","onClick","labelType","charAt","toUpperCase","slice","Col","id","className","Button","variant","icon","Timer","timerLabel","timeLeft","isActive","secondsToString","onStartStopButtonClick","onResetButtonClick","Container","Row","src","beepUrl","kind","library","add","faPlus","faMinus","faPlay","faPause","faUndo","App","useState","breakTime","setBreakTime","sessionTime","setSessionTime","setTimerLabel","setTimeLeft","setIsActive","playBeep","document","getElementById","play","useEffect","window","setInterval","t","setTimeout","clearInterval","formatTime","toString","calculateTime","minute","newSessionTime","seconds","Math","floor","second","beep","currentTime","pause","stopBeep","ReactDOM","render"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,kC,sNC2C5BC,G,MA/BmB,SAACC,GAAkB,IAC3CC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,QACdC,EAAYH,EAAKI,OAAO,GAAGC,cAAgBL,EAAKM,MAAM,GAG5D,OACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,GAAE,UAAKR,EAAL,UAAmBS,UAAU,aAApC,UACMN,EADN,YAGA,kBAACO,EAAA,EAAD,CACEF,GAAE,UAAKR,EAAL,cACFW,QATU,kBAUVT,QAAS,kBAAMA,GAAS,KAExB,kBAAC,IAAD,CAAiBU,KAAK,WAExB,0BAAMJ,GAAE,UAAKR,EAAL,WAAoBS,UAAU,UACnCR,GAEH,kBAACS,EAAA,EAAD,CACEF,GAAE,UAAKR,EAAL,cACFW,QAnBU,kBAoBVT,QAAS,kBAAMA,EAAQ,KAEvB,kBAAC,IAAD,CAAiBU,KAAK,a,iBCkCfC,G,MAvDgB,SAACd,GAAkB,IAE9Ce,EAMEf,EANFe,WACAC,EAKEhB,EALFgB,SACAC,EAIEjB,EAJFiB,SACAC,EAGElB,EAHFkB,gBACAC,EAEEnB,EAFFmB,uBACAC,EACEpB,EADFoB,mBAGF,OACE,kBAACZ,EAAA,EAAD,KACE,kBAACa,EAAA,EAAD,CAAWX,UAAU,mBACnB,kBAACY,EAAA,EAAD,CAAKZ,UAAU,QACb,kBAACF,EAAA,EAAD,CAAKE,UAAU,qBACb,yBAAKD,GAAG,cAAcC,UAAU,eAC7BK,KAIP,kBAACO,EAAA,EAAD,CAAKZ,UAAU,QACb,kBAACF,EAAA,EAAD,CAAKE,UAAU,qBACb,yBAAKD,GAAG,YAAYC,UAAU,aAC3BQ,EAAgBF,MAIvB,kBAACM,EAAA,EAAD,CAAKZ,UAAU,QACb,kBAACF,EAAA,EAAD,CAAKE,UAAU,sCACb,kBAACC,EAAA,EAAD,CACEF,GAAG,aACHC,UAAU,MACVE,QAAQ,kBACRT,QAASgB,GAET,kBAAC,IAAD,CAAiBN,KAAMI,EAAW,QAAU,UAE9C,kBAACN,EAAA,EAAD,CACEF,GAAG,QACHC,UAAU,MACVE,QAAQ,kBACRT,QAASiB,GAET,kBAAC,IAAD,CAAiBP,KAAK,aAK9B,2BAAOJ,GAAG,OAAOc,IAAKC,KACpB,2BAAOC,KAAK,iB,MClDpBC,IAAQC,IAAIC,IAAQC,IAASC,IAAQC,IAASC,KAE9C,IA6HeC,EArHO,WAAO,IAAD,EACQC,mBATP,GAQD,mBACnBC,EADmB,KACRC,EADQ,OAEYF,mBATT,IAOH,mBAEnBG,EAFmB,KAENC,EAFM,OAGUJ,mBANhB,WAGM,mBAGnBnB,EAHmB,KAGPwB,EAHO,OAIML,mBAVD,MAML,mBAInBlB,EAJmB,KAITwB,EAJS,OAKMN,oBAAS,GALf,mBAKnBjB,EALmB,KAKTwB,EALS,KAOpBC,EAAW,WACFC,SAASC,eAAe,QAChCC,QASPC,qBAAU,WACR,IAAIrC,EAAK,EAsBT,OApBIQ,GAAyB,IAAbD,EACdP,EAAKsC,OAAOC,aAAY,WACtBR,GAAY,SAACS,GAAD,OAAOA,EAAI,OACtB,KACMhC,GAAyB,IAAbD,GA5BL,YA4BuBD,GACvC2B,IACAjC,EAAKsC,OAAOG,YAAW,WACrBX,EA9BY,SA+BZC,EAAwB,GAAZL,KACX,MACMlB,GAAyB,IAAbD,GAjCP,UAiCyBD,GACvC2B,IACAjC,EAAKsC,OAAOG,YAAW,WACrBX,EArCc,WAsCdC,EAA0B,GAAdH,KACX,MACOpB,GAAyB,IAAbD,GACtBmC,cAAc1C,GAGT,kBAAM0C,cAAc1C,MAC1B,CAAC0B,EAAWlB,EAAUoB,EAAarB,EAAUD,IAEhD,IASMqC,EAAa,SAAClD,GAClB,OAAOA,EAAO,GAAP,WAAgBA,EAAKmD,YAAenD,EAAKmD,YAU5CC,EAAgB,SAACC,GACrB,OAAIA,EArEW,IAwEXA,EAzEW,MA4ERA,GAiBT,OACE,kBAAClC,EAAA,EAAD,CAAWX,UAAU,eACnB,kBAACY,EAAA,EAAD,KACE,kBAACd,EAAA,EAAD,KACE,gDAGJ,kBAACc,EAAA,EAAD,KACE,kBAAC,EAAD,CAAUrB,KAAK,QAAQC,KAAMiC,EAAWhC,QAtBnB,SAACoD,GAC1BnB,EAAakB,EAAcnB,EAAYoB,OAsBnC,kBAAC,EAAD,CACEtD,KAAK,UACLC,KAAMmC,EACNlC,QAtBqB,SAACoD,GAC5B,IAAMC,EAAiBF,EAAcjB,EAAckB,GACnDjB,EAAekB,GACfhB,EAA6B,GAAjBgB,OAsBV,kBAAClC,EAAA,EAAD,KACE,kBAAC,EAAD,CACEP,WAAYA,EACZC,SAAUA,EACVC,SAAUA,EACVC,gBAnDgB,SAACuC,GACvB,IAAMF,EAASH,EAAWM,KAAKC,MAAMF,EAAU,KACzCG,EAASR,EAAWK,EAAU,IAEpC,MAAM,GAAN,OAAUF,EAAV,YAAoBK,IAgDdzC,uBAzBuB,WAC7BsB,GAAaxB,IAyBPG,mBAlEmB,WACzBgB,EArDyB,GAsDzBE,EArD2B,IAsD3BC,EAlDkB,WAmDlBC,EAtD6B,MAuD7BC,GAAY,GArCG,WACf,IAAMoB,EAAOlB,SAASC,eAAe,QACrCiB,EAAKC,YAAc,EACnBD,EAAKE,QAmCLC,SCtEJC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASC,eAAe,W","file":"static/js/main.7f273ead.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.ca08d4b3.mp3\";","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport { Col, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Controls.css';\n\ntype Props = {\n  type: string;\n  time: number;\n  onClick: (minute: number) => void;\n};\n\nconst Controls: React.FC<Props> = (props: Props) => {\n  const { type, time, onClick } = props;\n  const labelType = type.charAt(0).toUpperCase() + type.slice(1);\n  const variant = 'outline-primary';\n\n  return (\n    <Col>\n      <div id={`${type}-label`} className=\"label m-1\">\n        {`${labelType} Length`}\n      </div>\n      <Button\n        id={`${type}-decrement`}\n        variant={variant}\n        onClick={() => onClick(-1)}\n      >\n        <FontAwesomeIcon icon=\"minus\" />\n      </Button>\n      <span id={`${type}-length`} className=\"length\">\n        {time}\n      </span>\n      <Button\n        id={`${type}-increment`}\n        variant={variant}\n        onClick={() => onClick(1)}\n      >\n        <FontAwesomeIcon icon=\"plus\" />\n      </Button>\n    </Col>\n  );\n};\n\nexport default Controls;\n","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport { Row, Col, Button, Container } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport beepUrl from '../sound/beep.mp3';\nimport './Timer.css';\n\ntype Props = {\n  timerLabel: string;\n  timeLeft: number;\n  isActive: boolean;\n  secondsToString: (timeLeft: number) => string;\n  onStartStopButtonClick: () => void;\n  onResetButtonClick: () => void;\n};\n\nconst Timer: React.FC<Props> = (props: Props) => {\n  const {\n    timerLabel,\n    timeLeft,\n    isActive,\n    secondsToString,\n    onStartStopButtonClick,\n    onResetButtonClick,\n  } = props;\n\n  return (\n    <Col>\n      <Container className=\"timer-container\">\n        <Row className=\"row1\">\n          <Col className=\"align-self-center\">\n            <div id=\"timer-label\" className=\"timer-label\">\n              {timerLabel}\n            </div>\n          </Col>\n        </Row>\n        <Row className=\"row2\">\n          <Col className=\"align-self-center\">\n            <div id=\"time-left\" className=\"time-left\">\n              {secondsToString(timeLeft)}\n            </div>\n          </Col>\n        </Row>\n        <Row className=\"row3\">\n          <Col className=\"align-self-center button-container\">\n            <Button\n              id=\"start_stop\"\n              className=\"m-1\"\n              variant=\"outline-primary\"\n              onClick={onStartStopButtonClick}\n            >\n              <FontAwesomeIcon icon={isActive ? 'pause' : 'play'} />\n            </Button>\n            <Button\n              id=\"reset\"\n              className=\"m-1\"\n              variant=\"outline-primary\"\n              onClick={onResetButtonClick}\n            >\n              <FontAwesomeIcon icon=\"undo\" />\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n      <audio id=\"beep\" src={beepUrl}>\n        <track kind=\"captions\" />\n      </audio>\n    </Col>\n  );\n};\n\nexport default Timer;\n","// eslint-disable-next-line no-use-before-define\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faPlus,\n  faMinus,\n  faPlay,\n  faPause,\n  faUndo,\n} from '@fortawesome/free-solid-svg-icons';\nimport Controls from './Controls';\nimport Timer from './Timer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nlibrary.add(faPlus, faMinus, faPlay, faPause, faUndo);\n\nconst DEFAULT_BREAK_MINUTE = 5;\nconst DEFAULT_SESSION_MINUTE = 25;\nconst DEFAULT_TIMELEFT_SECONDS = 25 * 60;\nconst MAX_MINUTE = 60;\nconst MIN_MINUTE = 1;\nconst SESSION_LABEL = 'Session';\nconst BREAK_LABEL = 'Break';\n\nconst App: React.FC = () => {\n  const [breakTime, setBreakTime] = useState(DEFAULT_BREAK_MINUTE);\n  const [sessionTime, setSessionTime] = useState(DEFAULT_SESSION_MINUTE);\n  const [timerLabel, setTimerLabel] = useState(SESSION_LABEL);\n  const [timeLeft, setTimeLeft] = useState(DEFAULT_TIMELEFT_SECONDS);\n  const [isActive, setIsActive] = useState(false);\n\n  const playBeep = () => {\n    const beep = document.getElementById('beep') as HTMLAudioElement;\n    beep.play();\n  };\n\n  const stopBeep = () => {\n    const beep = document.getElementById('beep') as HTMLAudioElement;\n    beep.currentTime = 0;\n    beep.pause();\n  };\n\n  useEffect(() => {\n    let id = 0;\n\n    if (isActive && timeLeft !== 0) {\n      id = window.setInterval(() => {\n        setTimeLeft((t) => t - 1);\n      }, 1000);\n    } else if (isActive && timeLeft === 0 && timerLabel === SESSION_LABEL) {\n      playBeep();\n      id = window.setTimeout(() => {\n        setTimerLabel(BREAK_LABEL);\n        setTimeLeft(breakTime * 60);\n      }, 1000);\n    } else if (isActive && timeLeft === 0 && timerLabel === BREAK_LABEL) {\n      playBeep();\n      id = window.setTimeout(() => {\n        setTimerLabel(SESSION_LABEL);\n        setTimeLeft(sessionTime * 60);\n      }, 1000);\n    } else if (!isActive && timeLeft !== 0) {\n      clearInterval(id);\n    }\n\n    return () => clearInterval(id);\n  }, [breakTime, isActive, sessionTime, timeLeft, timerLabel]);\n\n  const onResetButtonClick = () => {\n    setBreakTime(DEFAULT_BREAK_MINUTE);\n    setSessionTime(DEFAULT_SESSION_MINUTE);\n    setTimerLabel(SESSION_LABEL);\n    setTimeLeft(DEFAULT_TIMELEFT_SECONDS);\n    setIsActive(false);\n    stopBeep();\n  };\n\n  const formatTime = (time: number) => {\n    return time < 10 ? `0${time.toString()}` : time.toString();\n  };\n\n  const secondsToString = (seconds: number) => {\n    const minute = formatTime(Math.floor(seconds / 60));\n    const second = formatTime(seconds % 60);\n\n    return `${minute}:${second}`;\n  };\n\n  const calculateTime = (minute: number) => {\n    if (minute < MIN_MINUTE) {\n      return MIN_MINUTE;\n    }\n    if (minute > MAX_MINUTE) {\n      return MAX_MINUTE;\n    }\n    return minute;\n  };\n\n  const onBreakButtonClick = (minute: number) => {\n    setBreakTime(calculateTime(breakTime + minute));\n  };\n\n  const onSessionButtonClick = (minute: number) => {\n    const newSessionTime = calculateTime(sessionTime + minute);\n    setSessionTime(newSessionTime);\n    setTimeLeft(newSessionTime * 60);\n  };\n\n  const onStartStopButtonClick = () => {\n    setIsActive(!isActive);\n  };\n\n  return (\n    <Container className=\"text-center\">\n      <Row>\n        <Col>\n          <h1>Pomodoro Clock</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Controls type=\"break\" time={breakTime} onClick={onBreakButtonClick} />\n        <Controls\n          type=\"session\"\n          time={sessionTime}\n          onClick={onSessionButtonClick}\n        />\n      </Row>\n      <Row>\n        <Timer\n          timerLabel={timerLabel}\n          timeLeft={timeLeft}\n          isActive={isActive}\n          secondsToString={secondsToString}\n          onStartStopButtonClick={onStartStopButtonClick}\n          onResetButtonClick={onResetButtonClick}\n        />\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}